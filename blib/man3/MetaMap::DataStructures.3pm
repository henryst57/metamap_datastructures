.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MetaMap::DataStructures 3pm"
.TH MetaMap::DataStructures 3pm "2020-03-18" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MetaMap::DataStructure \- provides a container for the information 
extracted from machine readable MetaMap mapped text.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides a container for the information extracted 
from machine readable MetaMap mapped text.
.PP
For more information please see the MetaMap::DataStructure.pm documentation.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
add synopsis
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This package provides a Perl container package to for information extracted 
from MetaMap mapped text.
.SH "INSTALL"
.IX Header "INSTALL"
To install the module, run the following magic commands:
.PP
.Vb 4
\&  perl Makefile.PL
\&  make
\&  make test
\&  make install
.Ve
.PP
This will install the module in the standard location. You will, most
probably, require root privileges to install in standard system
directories. To install in a non-standard directory, specify a prefix
during the 'perl Makefile.PL' stage as:
.PP
.Vb 1
\&  perl Makefile.PL PREFIX=/home/sam
.Ve
.PP
It is possible to modify other parameters during installation. The
details of these can be found in the ExtUtils::MakeMaker
documentation. However, it is highly recommended not messing around
with other parameters, unless you know what you're doing.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package provides a Perl containers for information 
extracted from MetaMap mapped text.
.SH "FUNCTION DESCRIPTIONS"
.IX Header "FUNCTION DESCRIPTIONS"
\fIgetCitations\fR
.IX Subsection "getCitations"
.PP
description:
.PP
.Vb 1
\& returns a hash table of Citations of this DataStrucures object
.Ve
.PP
input:
.PP
.Vb 1
\& None
.Ve
.PP
output:
.PP
.Vb 2
\& hashtable reference with Citation IDs as keys and Citation object references 
\&   as values
.Ve
.PP
example:
.PP
.Vb 3
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& my $citations = $datastructures\->getCitations();
.Ve
.PP
\fIgetOrderedUtterances\fR
.IX Subsection "getOrderedUtterances"
.PP
description:
.PP
.Vb 3
\& returns an ordered list of Utterances contained by the Citation. Utterances
\& are ordered by title, abstract, then number in ascending order
\& (e.g. ti.000.1, ti.000.2, ab.000.1, ab.000.2, ab.000.3)
.Ve
.PP
input:
.PP
.Vb 1
\& a reference to a Citation object
.Ve
.PP
output:
.PP
.Vb 1
\& array reference containing references to Utterance objects
.Ve
.PP
example:
.PP
.Vb 4
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& my $citation = $dataStructures\->getCitationWithID(\*(Aq01234567\*(Aq);
\& my $orderedUtterances = $dataStructures\->getOrderedUtterances($citation);
.Ve
.PP
\fIgetOrderedTokens\fR
.IX Subsection "getOrderedTokens"
.PP
description:
.PP
.Vb 2
\& returns a list of ordered Tokens within a Citation. Tokens are ordered by 
\& their appearance within the input text, with titles preceding abstracts
.Ve
.PP
input:
.PP
.Vb 1
\& a reference to a Citation object
.Ve
.PP
output:
.PP
.Vb 1
\& array reference containing references to Token objects
.Ve
.PP
example:
.PP
.Vb 4
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& my $citation =  $dataStructures\->getCitationWithID(\*(Aq01234567\*(Aq);
\& my $orderedTokens = $dataStructures\->getOrderedTokens($citation);
.Ve
.PP
\fIgetOrderedConcepts\fR
.IX Subsection "getOrderedConcepts"
.PP
description:
.PP
.Vb 6
\& returns a list of ordered sub\-arrays containing Concepts within a Citation. 
\& Each sub\-array contains one or more reference to Concept objects. Where 
\& multiple concept objects exist is because of ambiguities. The sub\-arrays are
\& ordered by their Concept\*(Aqs appearance within the input text, with titles 
\& preceding abstracts. Think of this as sequentical CUIs where the second 
\& dimension is for when multiple CUIS map to the same Tokens due to ambiguity.
.Ve
.PP
input:
.PP
.Vb 1
\& a reference to a Citation object
.Ve
.PP
output:
.PP
.Vb 2
\& array reference containing references arrays containing references to Concept 
\& objects
.Ve
.PP
example:
.PP
.Vb 4
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& my $citation = $dataStructures\->getCitationWithID(\*(Aq01234567\*(Aq);
\& my $orderedConcepts = $dataStructures\->getOrderedConcepts($citation);
.Ve
.PP
\fIgetUniqueConcepts\fR
.IX Subsection "getUniqueConcepts"
.PP
description:
.PP
.Vb 2
\& returns a hash table containing all unique Concepts with unique CUIs
\& within a citation.
.Ve
.PP
input:
.PP
.Vb 1
\& a reference to a Citation object
.Ve
.PP
output:
.PP
.Vb 3
\& hashtable reference with keys of CUI codes, and values of references to Concept
\&   objects. Where multiple concepts of the same CUI exist, the reference is to
\&   the last seen Concept object
.Ve
.PP
example:
.PP
.Vb 4
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& my $citation = $dataStructures\->getCitationWithID(\*(Aq01234567\*(Aq);
\& my $uniqueConcepts = $dataStructures\->getUniqueConcepts($citation);
.Ve
.PP
\fIgetCitationWithId\fR
.IX Subsection "getCitationWithId"
.PP
description:
.PP
.Vb 1
\& returns a Citation with the specified ID
.Ve
.PP
input:
.PP
.Vb 1
\& string of the Citation ID
.Ve
.PP
output:
.PP
.Vb 1
\& reference to a Citation object
.Ve
.PP
example:
.PP
.Vb 3
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& my $citation = $dataStructures\->getCitationWithId(\*(Aq01234567\*(Aq);
.Ve
.PP
\fIgetOrderedMappings\fR
.IX Subsection "getOrderedMappings"
.PP
description:
.PP
.Vb 2
\& returns a list of ordered Mappings within a Citation. Mappings are ordered by 
\& their appearance within the input text, with titles preceding abstracts
.Ve
.PP
input:
.PP
.Vb 1
\& a reference to a Citation object
.Ve
.PP
output:
.PP
.Vb 1
\& array reference containing references to Mapping objects
.Ve
.PP
example:
.PP
.Vb 4
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& my $citation = $dataStructures\->getCitationWithId(\*(Aq01234567\*(Aq);
\& my $orderedMappings = $dataStructures\->getOrderedMappings($citation);
.Ve
.PP
\fIhasTitle\fR
.IX Subsection "hasTitle"
.PP
description:
.PP
.Vb 2
\& returns 1 if a Citation contains a title Utterance (ID contains \*(Aqti\*(Aq) 
\& else 0
.Ve
.PP
input:
.PP
.Vb 1
\& a reference to a Citation object
.Ve
.PP
output:
.PP
.Vb 1
\& boolean
.Ve
.PP
example:
.PP
.Vb 4
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& my $citation = $dataStructures\->getCitationWithId(\*(Aq01234567\*(Aq);
\& my $hasTitle = $dataStructures\->hasTitle($citation);
.Ve
.PP
\fIhasAbstract\fR
.IX Subsection "hasAbstract"
.PP
description:
.PP
.Vb 2
\& returns 1 if a Citation contains an abstract Utterance (ID contains \*(Aqab\*(Aq) 
\& else 0
.Ve
.PP
input:
.PP
.Vb 1
\& a reference to a Citation object
.Ve
.PP
output:
.PP
.Vb 1
\& boolean
.Ve
.PP
example:
.PP
.Vb 4
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& my $citation = $dataStructures\->getCitationWithId(\*(Aq01234567\*(Aq);
\& my $hasAbstract = $dataStructures\->hasAbstract($citation);
.Ve
.PP
\fIcreateFromText\fR
.IX Subsection "createFromText"
.PP
description:
.PP
.Vb 1
\& updates MetaMap Data structures with the text of the input string
.Ve
.PP
input:
.PP
.Vb 1
\& string of MetaMap Prolg Output containing an utterance, or list of utterances
.Ve
.PP
output:
.PP
.Vb 1
\& None
.Ve
.PP
example:
.PP
.Vb 3
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& $datastructures\->createFromText($text);
.Ve
.PP
\fIcreateFromTextWithId\fR
.IX Subsection "createFromTextWithId"
.PP
description:
.PP
.Vb 2
\& updates MetaMap Data structures with the text of the input string, and gives 
\&   the addition the ID provided
.Ve
.PP
input:
.PP
.Vb 2
\& string of MetaMap Prolg Output containing an utterance, or list of utterances
\& string ID of the utterance or list of utterances to add
.Ve
.PP
output:
.PP
.Vb 1
\& None
.Ve
.PP
example:
.PP
.Vb 3
\& use MetaMap::DataStructures; 
\& my $datastructures = MetaMap::DataStructures\->new(); 
\& $datastructures\->createFromTextWithID($text,\*(Aq01234567\*(Aq);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "AUTHOR"
.IX Header "AUTHOR"
Sam Henry <henryst@vcu.edu>
Bridget T McInnes <btmcinnes@vcu.edu>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 3
\& Copyright (c) 2016
\& Sam Henry, Virginia Commonwealth University 
\& henryst at vcu.edu 
\&
\& Bridget T. McInnes, Virginia Commonwealth University 
\& btmcinnes at vcu.edu
.Ve
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT
ANY WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS
FOR A PARTICULAR PURPOSE.\s0 See the \s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to
.PP
.Vb 3
\& The Free Software Foundation, Inc.,
\& 59 Temple Place \- Suite 330,
\& Boston, MA  02111\-1307, USA.
.Ve
